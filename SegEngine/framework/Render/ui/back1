#include "imgui_init.hpp"
#include "context.hpp"
#include "imgui_impl_vulkan.h"
#include "imgui_impl_sdl2.h"

#include "framework/window/SGwindow.hpp"
#include "context.hpp"

ImguiInit::ImguiInit()
{
  IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGui::StyleColorsDark();

    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
    io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;         // Enable Docking
    io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;       // Enable Multi-Viewport / Platform Windows
    //io.ConfigViewportsNoAutoMerge = true;
    //io.ConfigViewportsNoTaskBarIcon = true;
    // Setup Dear ImGui style
    //ImGui::StyleColorsLight();

    //io.Fonts->AddFontFromFileTTF("../resource/Fonts/ziti.ttf",18,NULL,io.Fonts->GetGlyphRangesChineseFull());

    //ImGui::GetIO().IniFilename = "../SGData/imgui/imgui.ini"; //ImGui Layout 

    ImGui::StyleColorsDark();
    ImGuiStyle& style = ImGui::GetStyle();
    
    style.WindowRounding = 4;
    style.FrameRounding = 4;
    style.GrabRounding = 3;
    style.ScrollbarSize = 7;
    style.ScrollbarRounding = 0;

    ImVec4* colors = style.Colors; 
    colors[ImGuiCol_FrameBg] = ImVec4(0.16f, 0.16f, 0.17f, 1.00f);
	colors[ImGuiCol_FrameBgHovered] = ImVec4(0.37f, 0.36f, 0.36f, 102.00f);
	colors[ImGuiCol_FrameBgActive] = ImVec4(0.10f, 0.10f, 0.10f, 171.00f);
	colors[ImGuiCol_TitleBgActive] = ImVec4(0.20f, 0.20f, 0.20f, 255.00f);
	colors[ImGuiCol_CheckMark] = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);
	colors[ImGuiCol_SliderGrab] = ImVec4(0.64f, 0.64f, 0.64f, 1.00f);
	colors[ImGuiCol_SliderGrabActive] = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);
	colors[ImGuiCol_Button] = ImVec4(0.22f, 0.22f, 0.22f, 0.40f);
	colors[ImGuiCol_ButtonHovered] = ImVec4(0.29f, 0.29f, 0.29f, 1.00f);
	colors[ImGuiCol_ButtonActive] = ImVec4(0.13f, 0.13f, 0.13f, 1.00f);
	colors[ImGuiCol_Header] = ImVec4(0.45f, 0.45f, 0.45f, 0.31f);
	colors[ImGuiCol_HeaderHovered] = ImVec4(0.55f, 0.55f, 0.55f, 0.80f);
	colors[ImGuiCol_HeaderActive] = ImVec4(0.09f, 0.09f, 0.09f, 1.00f);
	colors[ImGuiCol_ResizeGrip] = ImVec4(1.00f, 1.00f, 1.00f, 0.20f);
	colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.46f, 0.46f, 0.46f, 0.67f);
	colors[ImGuiCol_ResizeGripActive] = ImVec4(0.17f, 0.17f, 0.17f, 0.95f);
	colors[ImGuiCol_SeparatorActive] = ImVec4(0.42f, 0.42f, 0.42f, 1.00f);
	colors[ImGuiCol_SeparatorHovered] = ImVec4(0.50f, 0.50f, 0.50f, 0.78f);
	colors[ImGuiCol_TabHovered] = ImVec4(0.45f, 0.45f, 0.45f, 0.80f);
	colors[ImGuiCol_TabActive] = ImVec4(0.28f, 0.28f, 0.28f, 1.00f);
	colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.19f, 0.19f, 0.19f, 1.00f);
	colors[ImGuiCol_DockingPreview] = ImVec4(0.51f, 0.51f, 0.51f, 0.70f);
	colors[ImGuiCol_Tab] = ImVec4(0.21f, 0.21f, 0.21f, 0.86f);
	colors[ImGuiCol_TabUnfocused] = ImVec4(0.15f, 0.15f, 0.15f, 0.97f);
	colors[ImGuiCol_NavHighlight] = ImVec4(1.00f, 0.40f, 0.13f, 1.00f);
	colors[ImGuiCol_TextSelectedBg] = ImVec4(0.45f, 1.00f, 0.85f, 0.35f); 

    // When viewports are enabled we tweak WindowRounding/WindowBg so platform windows can look identical to regular ones.
    
    if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
    {
        style.WindowRounding = 0.0f;
        style.Colors[ImGuiCol_WindowBg].w = 1.0f;
    }

    Init_Imgui(); //Init Imgui Vulkan Data
    ImGui_ImplSDL2_InitForVulkan(Sego::SGwindow::Instance()->getWindow());

    ImGui_ImplVulkan_InitInfo init_info = {};
    init_info.Instance = Sego::Context::Instance().instance;
    init_info.PhysicalDevice = Sego::Context::Instance().phyDevice;
    init_info.Device = Sego::Context::Instance().device;
    init_info.QueueFamily = Sego::Context::Instance().queueInfo.graphicsIndex.value();
    init_info.Queue = Sego::Context::Instance().graphicsQueue;
    init_info.PipelineCache = nullptr;
    init_info.DescriptorPool = uiDescriptorPool;
    init_info.MSAASamples = VK_SAMPLE_COUNT_1_BIT;
    init_info.MinImageCount = 3;
    init_info.ImageCount = 3;
    init_info.CheckVkResultFn = nullptr;
    ImGui_ImplVulkan_Init(&init_info, uiRenderPass);

    // Upload the fonts for DearImgui
    {
        
        Sego::Context::Instance().commandManager->ExecuteCmd(Sego::Context::Instance().graphicsQueue
        , [&](vk::CommandBuffer cmd){
            ImGui_ImplVulkan_CreateFontsTexture(cmd);
        });

        Sego::Context::Instance().device.waitIdle();
        ImGui_ImplVulkan_DestroyFontUploadObjects();
    }


}


ImguiInit::~ImguiInit()
{
    ImGui_ImplVulkan_Shutdown();
    ImGui_ImplSDL2_Shutdown();
    ImGui::DestroyContext();
    Sego::Context::Instance().device.destroyDescriptorPool(uiDescriptorPool);
    Sego::Context::Instance().device.destroyRenderPass(uiRenderPass);
    Sego::Context::Instance().device.freeCommandBuffers(uiCommPool, uiCommandBuffers);
    Sego::Context::Instance().device.destroyCommandPool(uiCommPool);
    for (auto framebuffer : uiFramebuffers) {
        Sego::Context::Instance().device.destroyFramebuffer(framebuffer);
    }
}




